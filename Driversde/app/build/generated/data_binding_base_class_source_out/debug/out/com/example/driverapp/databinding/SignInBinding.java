// Generated by view binder compiler. Do not edit!
package com.example.driverapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.driverapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SignInBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button button03;

  @NonNull
  public final EditText editText01;

  @NonNull
  public final EditText editText02;

  @NonNull
  public final ImageView imageView03;

  @NonNull
  public final TextView textView02;

  private SignInBinding(@NonNull ConstraintLayout rootView, @NonNull Button button03,
      @NonNull EditText editText01, @NonNull EditText editText02, @NonNull ImageView imageView03,
      @NonNull TextView textView02) {
    this.rootView = rootView;
    this.button03 = button03;
    this.editText01 = editText01;
    this.editText02 = editText02;
    this.imageView03 = imageView03;
    this.textView02 = textView02;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SignInBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SignInBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.sign_in, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SignInBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button03;
      Button button03 = ViewBindings.findChildViewById(rootView, id);
      if (button03 == null) {
        break missingId;
      }

      id = R.id.editText01;
      EditText editText01 = ViewBindings.findChildViewById(rootView, id);
      if (editText01 == null) {
        break missingId;
      }

      id = R.id.editText02;
      EditText editText02 = ViewBindings.findChildViewById(rootView, id);
      if (editText02 == null) {
        break missingId;
      }

      id = R.id.imageView03;
      ImageView imageView03 = ViewBindings.findChildViewById(rootView, id);
      if (imageView03 == null) {
        break missingId;
      }

      id = R.id.textView02;
      TextView textView02 = ViewBindings.findChildViewById(rootView, id);
      if (textView02 == null) {
        break missingId;
      }

      return new SignInBinding((ConstraintLayout) rootView, button03, editText01, editText02,
          imageView03, textView02);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
