// Generated by view binder compiler. Do not edit!
package com.example.driverapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.driverapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ChoiceBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button button08;

  @NonNull
  public final Button button12;

  @NonNull
  public final Button button14;

  @NonNull
  public final ImageButton imageButton01;

  @NonNull
  public final ImageView imageView03;

  private ChoiceBinding(@NonNull ConstraintLayout rootView, @NonNull Button button08,
      @NonNull Button button12, @NonNull Button button14, @NonNull ImageButton imageButton01,
      @NonNull ImageView imageView03) {
    this.rootView = rootView;
    this.button08 = button08;
    this.button12 = button12;
    this.button14 = button14;
    this.imageButton01 = imageButton01;
    this.imageView03 = imageView03;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ChoiceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ChoiceBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.choice, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ChoiceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button08;
      Button button08 = ViewBindings.findChildViewById(rootView, id);
      if (button08 == null) {
        break missingId;
      }

      id = R.id.button12;
      Button button12 = ViewBindings.findChildViewById(rootView, id);
      if (button12 == null) {
        break missingId;
      }

      id = R.id.button14;
      Button button14 = ViewBindings.findChildViewById(rootView, id);
      if (button14 == null) {
        break missingId;
      }

      id = R.id.imageButton01;
      ImageButton imageButton01 = ViewBindings.findChildViewById(rootView, id);
      if (imageButton01 == null) {
        break missingId;
      }

      id = R.id.imageView03;
      ImageView imageView03 = ViewBindings.findChildViewById(rootView, id);
      if (imageView03 == null) {
        break missingId;
      }

      return new ChoiceBinding((ConstraintLayout) rootView, button08, button12, button14,
          imageButton01, imageView03);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
